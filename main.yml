- name: Generate ssh key
  hosts: home
  vars_files:
    - vars.yml
  vars:
    ansible_become_pass: "{{ home.become_password }}"
  tags:
    - proxy
  tasks:
    - name: Generate key pair
      become: true
      ansible.builtin.shell:
        cmd: ssh-keygen -b 2048 -t rsa -f {{ ansible_env.HOME }}/.ssh/id_rsa -q -N /dev/null
      args:
        creates: "{{ ansible_env.HOME }}/.ssh/id_rsa"
    - name: Retrieve public key
      ansible.builtin.shell:
        cmd: cat {{ ansible_env.HOME }}/.ssh/id_rsa.pub
      changed_when: false
      register: public_key

- name: Setup reverse proxy
  hosts: aws
  become: true
  vars_files:
    - secrets.yml
  tags:
    - proxy
  tasks:
    - name: Add public key
      ansible.posix.authorized_key:
        user: root
        key: "{{ hostvars['server'].public_key.stdout }}"
    - name: Update
      ansible.builtin.package:
        update_cache: true
    - name: Add nginx user
      ansible.builtin.user:
        name: nginx
        shell: /bin/false
    - name: Install nginx
      ansible.builtin.package:
        name: nginx
    - name: Install certbot
      ansible.builtin.package:
        name: certbot
    - name: Install python3-certbot-nginx
      ansible.builtin.package:
        name: python3-certbot-nginx
    - name: Copy nginx configuration
      become: true
      ansible.builtin.copy:
        src: ./files/nginx.conf
        dest: /etc/nginx/nginx.conf
      notify:
        - Restart nginx
    - name: Install certificate
      ansible.builtin.command:
        argv:
          - /usr/bin/certbot
          - --nginx
          - -d
          - home.felixscherz.me
          - -d
          - paperless.felixscherz.me
          - -d
          - grocy.felixscherz.me
          - -d
          - mealie.felixscherz.me
          - -n
          - --agree-tos
          - --email
          - felixwscherz@gmail.com

  handlers:
    - name: Restart nginx
      become: true
      ansible.builtin.systemd_service:
        state: restarted
        name: nginx

- name: Setup daily sleep cron job
  hosts: home
  vars_files:
    - vars.yml
  vars:
    ansible_become_pass: "{{ home.become_password }}"
  tasks:
    - name: Add daily sleep cron job for server sleep
      become: true
      ansible.builtin.cron:
        name: "Send server to sleep for 8 hours"
        hour: "22"
        user: root
        job: "sudo rtcwake -m mem -s 28800"



- name: Setup paperless
  hosts: home
  vars_files:
    - vars.yml
  vars:
    ansible_become_pass: "{{ home.become_password }}"
  tasks:
    - name: Create cronjob for paperless backup
      ansible.builtin.cron:
        name: Paperless backup
        special_time: hourly
        job: docker compose -f ~/paperless/docker-compose.yml exec -T webserver document_exporter ../export

- name: SSH Hardening and Security
  hosts: all
  become: true
  vars_files:
    - vars.yml
  vars:
    ansible_become_pass: "{% if inventory_hostname in groups['home'] %}{{ home.become_password }}{% endif %}"
  tasks:
    - name: Install fail2ban
      ansible.builtin.package:
        name: fail2ban
        state: present
        update_cache: yes

    - name: Create fail2ban jail configuration
      ansible.builtin.template:
        src: fail2ban-jail.local.j2
        dest: /etc/fail2ban/jail.local
        owner: root
        group: root
        mode: '0644'
      notify: Restart fail2ban

    - name: Backup original SSH config
      ansible.builtin.copy:
        src: /etc/ssh/sshd_config
        dest: /etc/ssh/sshd_config.backup
        remote_src: yes
        force: no

    - name: Deploy hardened SSH configuration
      ansible.builtin.template:
        src: sshd_config.j2
        dest: /etc/ssh/sshd_config
        owner: root
        group: root
        mode: '0644'
        backup: yes
      notify:
        - Restart sshd
        - Restart fail2ban

    - name: Start and enable fail2ban
      ansible.builtin.systemd:
        name: fail2ban
        state: started
        enabled: yes

  handlers:
    - name: Restart fail2ban
      ansible.builtin.systemd:
        name: fail2ban
        state: restarted

    - name: Restart sshd
      ansible.builtin.systemd:
        # Ubuntu/Debian uses 'ssh' service name, RHEL/CentOS uses 'sshd'
        name: "{{ ssh if inventory_hostname in groups.aws else sshd }}"
        state: restarted


- name: Setup VPN client
  hosts: home
  tags:
    - vpn
  vars_files:
    - vars.yml
  vars:
    server_pubkey: "{{ proxy.wg_pubkey }}"
    ansible_become_pass: "{{ home.become_password }}"
  become: true
  tasks:
    - name: Install wireguard package
      ansible.builtin.package:
        name: wireguard
        state: present
        update_cache: yes

    - name: Generate private key
      ansible.builtin.shell:
        cmd: umask 077 && wg genkey | tee privatekey | wg pubkey > publickey
        chdir: /etc/wireguard
        creates: /etc/wireguard/publickey

    - name: Get public key
      ansible.builtin.command: cat /etc/wireguard/publickey
      register: publickey_contents
      changed_when: False

    - name: set public key fact
      ansible.builtin.set_fact:
        pubkey: "{{ publickey_contents.stdout }}"

    - name: Create client wireguard config
      ansible.builtin.template:
        dest: /etc/wireguard/wg0.conf
        src: client_wg0.conf.j2
        owner: root
        group: root
        mode: '0600'


- name: Setup VPN server
  hosts: proxy
  tags:
    - vpn
  vars_files:
    - vars.yml
  vars:
    server_privkey: "{{ proxy.wg_privkey }}"
    server_pubkey: "{{ proxy.wg_pubkey }}"
  tasks:
    - name: Install wireguard package
      ansible.builtin.package:
        name: wireguard
        state: present
        update_cache: yes

    - name: Create server wireguard config
      ansible.builtin.template:
        dest: /etc/wireguard/wg0.conf
        src: server_wg0.conf.j2
        owner: root
        group: root
        mode: '0600'
      notify: Restart wireguard

    - name: Enable and persist IP forwarding
      ansible.builtin.sysctl:
        name: net.ipv4.ip_forward
        value: "1"
        state: present
        sysctl_set: yes
        reload: yes

    - name: Start wireguard and enable on boot
      ansible.builtin.systemd:
        name: wg-quick@wg0
        enabled: yes
        state: started
  handlers:
    - name: Restart wireguard
      ansible.builtin.systemd_service:
        state: restarted
        name: wg-quick@wg0

- name: Start VPN client
  hosts: home
  tags:
    - vpn
  vars_files:
    - vars.yml
  vars:
    server_pubkey: "{{ proxy.wg_pubkey }}"
    ansible_become_pass: "{{ home.become_password }}"
  become: true
  tasks:
    - name: Start wireguard and enable on boot
      ansible.builtin.systemd:
        name: wg-quick@wg0
        enabled: yes
        state: restarted

- name: Setup grocy
  hosts: home
  tags:
    - grocy
  vars_files:
    - vars.yml
  vars:
    grocy_home: ~/grocy
  tasks:
    - name: Create application directory
      ansible.builtin.file:
        path: "{{ grocy_home }}"
        state: directory
        mode: '0755'
    - name: Create config directory
      ansible.builtin.file:
        path: "{{ grocy_home }}/config"
        state: directory
    - name: Copy compose file
      ansible.builtin.template:
        src: grocy-docker-compose.yml.j2
        dest: "{{ grocy_home }}/docker-compose.yml"
        mode: '0644'
      notify: Restart docker-compose services
    - name: Start services
      community.docker.docker_compose_v2:
        project_src: ~/grocy
        state: present
  handlers:
    - name: Restart docker-compose services
      community.docker.docker_compose_v2:
        project_src: ~/grocy
        state: restarted


- name: Setup mealie
  hosts: home
  tags:
    - mealie
  vars_files:
    - vars.yml
  vars:
    mealie_home: ~/mealie
  tasks:
    - name: Create application directory
      ansible.builtin.file:
        path: "{{ mealie_home }}"
        state: directory
        mode: '0755'
    - name: Copy compose file
      ansible.builtin.template:
        src: mealie-docker-compose.yml
        dest: "{{ mealie_home }}/docker-compose.yml"
        mode: '0644'
      notify: Restart docker-compose services
    - name: Start services
      community.docker.docker_compose_v2:
        project_src: "{{ mealie_home }}"
        state: present
  handlers:
    - name: Restart docker-compose services
      community.docker.docker_compose_v2:
        project_src: "{{ mealie_home }}"
        state: restarted
